import org.cghio.cantonese.romanization.Pinyin2Hanzi;
import static org.junit.Assert.assertArrayEquals;

public class test_pinyin2hanzi_1 {

  private static int[] p2h(String pinyin) {
    return Pinyin2Hanzi.fromPinyin(pinyin);
  }

  public static void main(String[] args) {
    assertArrayEquals(new int[]{ 20011, 20122, 20126, 21526, 21568, 21713, 21834, 21854, 27689, 27692, 37650, 38165, 38463, 40201, 40486 }, p2h("a"));
    assertArrayEquals(new int[]{ 21710, 21769, 21964, 22003, 22127, 22467, 25384, 38552 }, p2h("aai"));
    assertArrayEquals(new int[]{ 20474, 26191 }, p2h("aan"));
    assertArrayEquals(new int[]{ 32578, 32588 }, p2h("aang"));
    assertArrayEquals(new int[]{ 40232, 40493 }, p2h("aap"));
    assertArrayEquals(new int[]{ 21387, 22739, 25276 }, p2h("aat"));
    assertArrayEquals(new int[]{ 25303 }, p2h("aau"));
    assertArrayEquals(new int[]{ 21380, 25212, 25569, 40823, 40844 }, p2h("ak"));
    assertArrayEquals(new int[]{ 26263, 35571, 35865, 40687 }, p2h("am"));
    assertArrayEquals(new int[]{ 33722, 40367 }, p2h("ang"));
    assertArrayEquals(new int[]{ 21589, 22036, 27431, 27472, 27572, 27590, 27812, 28442, 40407, 40485 }, p2h("au"));
    assertArrayEquals(new int[]{ 21485, 21543, 22365, 22761, 24052, 25226, 29240, 30116, 31494, 31889, 32610, 32631, 33453, 33897, 37376, 38063, 38712, 38774 }, p2h("ba"));
    assertArrayEquals(new int[]{ 21591, 21764, 25308, 25670, 25850, 25943, 28227, 31255, 36133 }, p2h("baai"));
    assertArrayEquals(new int[]{ 20271, 20336, 21340, 24091, 30333, 30334, 36843 }, p2h("baak"));
    assertArrayEquals(new int[]{ 21150, 22338, 25198, 26001, 26495, 29247, 29256, 29677, 33320, 36774, 38442, 38930, 39041 }, p2h("baan"));
    assertArrayEquals(new int[]{ 32323, 32503, 36454 }, p2h("baang"));
    assertArrayEquals(new int[]{ 20843, 25420 }, p2h("baat"));
    assertArrayEquals(new int[]{ 21253, 29190, 32990, 33502, 39165, 39281, 39825, 40077, 40793, 40837 }, p2h("baau"));
    assertArrayEquals(new int[]{ 24065, 24163, 24330, 25949, 25987, 27609, 34006, 34109, 38281, 38381, 38491 }, p2h("bai"));
    assertArrayEquals(new int[]{ 21271 }, p2h("bak"));
    assertArrayEquals(new int[]{ 20051, 27893 }, p2h("bam"));
    assertArrayEquals(new int[]{ 20647, 20752, 21697, 22868, 23252, 23338, 23486, 24428, 25672, 25839, 25996, 27553, 27567, 28392, 28657, 31104, 31263, 31528, 33169, 33231, 36051, 37659, 37964, 38171, 38228 }, p2h("ban"));
    assertArrayEquals(new int[]{ 22051, 23849 }, p2h("bang"));
    assertArrayEquals(new int[]{ 19981, 21716, 22006, 24380, 25300, 27605, 30050, 31508, 31558, 36299, 38042 }, p2h("bat"));
    assertArrayEquals(new int[]{ 21860 }, p2h("be"));
    assertArrayEquals(new int[]{ 20478, 20633, 21269, 21329, 21537, 22791, 22947, 24199, 24444, 24754, 24811, 24970, 27604, 27606, 27607, 27852, 30016, 30201, 30202, 30865, 31192, 32628, 32646, 33086, 33218, 34987, 36705, 36756, 36991, 40763 }, p2h("bei"));
    assertArrayEquals(new int[]{ 26564, 30102, 30109, 30112, 30115, 30124, 30128, 30129, 30131, 30136, 30146, 30147, 30148, 30149, 30157, 30166, 30180, 30182, 30183, 30187, 30193, 30204, 30207, 30211, 30213, 30218, 30224, 30229, 30231, 30232, 30233, 30235, 30238, 30240, 30242, 30245, 30253, 30256, 30259, 30261, 30268, 30270, 30271, 30272, 30275, 30279, 30281, 30285, 30292, 30296, 30300, 30302, 30308, 30313, 30317, 30318, 30319, 30384, 39173, 39292 }, p2h("beng"));
    assertArrayEquals(new int[]{ 22721, 29863, 30887, 35166, 36924 }, p2h("bik"));
    assertArrayEquals(new int[]{ 20415, 21310, 21342, 21464, 25153, 27764, 31366, 35722, 36022, 36140, 36776, 36777, 36779, 36782, 36783, 36793, 37002, 38829 }, p2h("bin"));
    assertArrayEquals(new int[]{ 19993, 20006, 20853, 20912, 24182, 28851, 31177, 36856 }, p2h("bing"));
    assertArrayEquals(new int[]{ 21029, 21035, 24517, 24971, 30250, 30303, 37453, 38091, 40009, 40150 }, p2h("bit"));
    assertArrayEquals(new int[]{ 23114, 24426, 26631, 27161, 34920, 37686, 37858, 37987, 38230, 38259 }, p2h("biu"));
    assertArrayEquals(new int[]{ 20296, 20445, 21754, 22484, 22561, 22577, 23453, 23542, 24067, 24598, 25253, 25429, 26292, 26333, 27493, 29042, 31807, 34917, 35036, 35090, 37096, 40199, 40488 }, p2h("bo"));
    assertArrayEquals(new int[]{ 21877, 22369, 25773, 27874, 29627, 33760, 37169 }, p2h("boh"));
    assertArrayEquals(new int[]{ 21338, 25615, 27850, 31636, 32283, 32538, 33162, 33334, 34180, 37457, 38082, 38491, 38649, 39361, 39539 }, p2h("bok"));
    assertArrayEquals(new int[]{ 24110, 24171, 26758, 27036, 30917, 32129, 32465, 37030, 37770, 38225 }, p2h("bong"));
    assertArrayEquals(new int[]{ 26479, 28953, 29384, 29437, 32972, 35997, 36016, 36018, 36026, 36029, 36033, 36037, 36053, 36058, 36071, 36100, 36112, 36125, 36146, 36147, 36150, 36155, 36157, 36160, 36165, 36166, 36167, 36169, 36173, 36181, 36649, 36744, 37575, 38049 }, p2h("booi"));
    assertArrayEquals(new int[]{ 20276, 21322, 21467, 25644, 26412, 30036, 32070, 32458, 32982, 33324, 33519 }, p2h("boon"));
    assertArrayEquals(new int[]{ 21187, 23387, 24726, 25320, 25765, 28196, 30773, 32573, 33046, 38069 }, p2h("boot"));
    assertArrayEquals(new int[]{ 20166, 20693, 21340, 21343, 28689, 37337, 38027 }, p2h("buk"));
    assertArrayEquals(new int[]{ 29997 }, p2h("bung"));
    assertArrayEquals(new int[]{ 21449, 21939, 23700, 24046, 25373, 25661, 25790, 26597, 33580, 33590, 35435, 35815, 38258, 40772 }, p2h("cha"));
    assertArrayEquals(new int[]{ 20394, 20757, 26612, 29468, 35962, 36393, 37365, 38039 }, p2h("chaai"));
    assertArrayEquals(new int[]{ 20874, 20876, 24699, 24827, 25286, 27979, 28204, 31574, 36042, 36156 }, p2h("chaak"));
    assertArrayEquals(new int[]{ 21442, 21443, 24808, 24813, 24920, 24922, 25530, 25600, 25723, 25881, 26441, 34453, 34870, 35730, 35863, 39262, 39307, 40682, 40690 }, p2h("chaam"));
    assertArrayEquals(new int[]{ 20135, 27531, 27544, 28799, 29158, 29986, 31922, 37855, 38130, 39184 }, p2h("chaan"));
    assertArrayEquals(new int[]{ 25744, 25745, 27225 }, p2h("chaang"));
    assertArrayEquals(new int[]{ 25554 }, p2h("chaap"));
    assertArrayEquals(new int[]{ 21047, 21808, 22163, 23519, 25830, 29549, 29562 }, p2h("chaat"));
    assertArrayEquals(new int[]{ 21557, 24034, 25220, 28818, 32790, 37396, 38046 }, p2h("chaau"));
    assertArrayEquals(new int[]{ 20666, 20932, 21724, 22156, 22971, 26646, 26866, 28114, 30732, 33803, 40778, 40784 }, p2h("chai"));
    assertArrayEquals(new int[]{ 20405, 21539, 23517, 23522, 23547, 23563, 27777, 27785, 27988, 28527, 35734, 35894, 40024, 40095 }, p2h("cham"));
    assertArrayEquals(new int[]{ 20146, 21698, 22645, 23576, 30043, 30137, 30695, 34924, 35183, 35242, 35386, 35786, 36225, 38472, 38515, 40788, 40832 }, p2h("chan"));
    assertArrayEquals(new int[]{ 23618, 23652, 26366 }, p2h("chang"));
    assertArrayEquals(new int[]{ 32221, 32521, 36655, 36753 }, p2h("chap"));
    assertArrayEquals(new int[]{ 19971, 26578, 28422 }, p2h("chat"));
    assertArrayEquals(new int[]{ 19985, 20454, 20756, 20945, 21957, 22234, 25277, 27845, 28234, 30068, 30087, 30597, 31179, 31264, 31609, 31820, 31959, 32162, 32504, 33261, 36364, 36490, 37228, 37276, 37740, 38201 }, p2h("chau"));
    assertArrayEquals(new int[]{ 19988, 21702, 22882, 25199, 26012, 36554, 36558, 36564, 36571, 36587, 36601, 36602, 36613, 36615, 36618, 36626, 36636, 36638, 36639, 36659, 36678, 36706, 36708, 36710, 36715, 36717, 36721, 36723, 36725, 36727, 36728, 36729, 36730, 36734, 36737, 36738, 36740, 36747, 36749, 36750, 36751, 36760, 37034 }, p2h("che"));
    assertArrayEquals(new int[]{ 21582, 23610 }, p2h("chek"));
    assertArrayEquals(new int[]{ 35531, 35831 }, p2h("cheng"));
    assertArrayEquals(new int[]{ 20524, 21242, 21331, 22913, 25139, 26700, 28796, 32189, 32496, 33421 }, p2h("cheuk"));
    assertArrayEquals(new int[]{ 20513, 21595, 21809, 21958, 22330, 22580, 22681, 23100, 25109, 25250, 25654, 26124, 26274, 26538, 27085, 29254, 29462, 30021, 31077, 31383, 32724, 32928, 33144, 34103, 34196, 35443, 35814, 38263, 38271 }, p2h("cheung"));
    assertArrayEquals(new int[]{ 20284, 20360, 21050, 21273, 21397, 21618, 21675, 21735, 21883, 21988, 22987, 22994, 24092, 24159, 24257, 24347, 24643, 24677, 24904, 25345, 26623, 27425, 27492, 27744, 28861, 29118, 29943, 30133, 30196, 30690, 30913, 31072, 31949, 32709, 32827, 33040, 33229, 33576, 34473, 35422, 35789, 36060, 36176, 36383, 36766, 36781, 36831, 36978, 38601, 38604, 39347, 39536, 40786, 40831 }, p2h("chi"));
    assertArrayEquals(new int[]{ 21489, 22017, 25114, 25941, 26021, 36196 }, p2h("chik"));
    assertArrayEquals(new int[]{ 20325, 20681, 20717, 22545, 22649, 26297, 28507, 28508, 31614, 31805, 37599, 38163 }, p2h("chim"));
    assertArrayEquals(new int[]{ 20191, 21069, 21315, 25190, 27516, 27570, 27973, 28293, 28666, 32399, 32406, 32420, 32544, 36801, 36983, 37666, 38030, 38065, 38369, 38416, 38433, 39019, 39076 }, p2h("chin"));
    assertArrayEquals(new int[]{ 21576, 24773, 24809, 25074, 25327, 26228, 27696, 28165, 28548, 30634, 31204, 31216, 31243, 31281, 34619, 35531, 35831, 36894, 38738 }, p2h("ching"));
    assertArrayEquals(new int[]{ 22974 }, p2h("chip"));
    assertArrayEquals(new int[]{ 20999, 24443, 24505, 25764, 27791, 28552, 35373, 35774, 36685, 36761 }, p2h("chit"));
    assertArrayEquals(new int[]{ 20431, 23789, 24708, 26157, 26397, 28526, 30631, 30977, 32918, 36229, 36834, 37335, 38026 }, p2h("chiu"));
    assertArrayEquals(new int[]{ 22024, 22122, 24450, 25514, 25805, 26361, 27133, 27522, 28577, 29157, 31895, 31961, 33226, 33370, 33609, 36481, 37259 }, p2h("cho"));
    assertArrayEquals(new int[]{ 21005, 21021, 25387, 25619, 26970, 30700, 30784, 30923, 30990, 33467, 37564, 37604, 37679, 38148, 38153, 38169, 38607, 38619 }, p2h("choh"));
    assertArrayEquals(new int[]{ 22622, 24425, 25165, 25505, 26448, 26685, 30572, 33756, 34081, 35009, 36001, 36093, 36130, 36187, 37319 }, p2h("choi"));
    assertArrayEquals(new int[]{ 20179, 20263, 20489, 20630, 21019, 21109, 21378, 24202, 24288, 25950, 27815, 28356, 30126, 30241, 33329, 33369, 33485, 33980, 34255, 38358, 38383 }, p2h("chong"));
    assertArrayEquals(new int[]{ 20267, 20295, 20648, 20786, 21416, 22788, 24282, 26329, 26609, 27249, 27365, 32626, 34389, 36015, 36142, 36464, 36487, 36501 }, p2h("chue"));
    assertArrayEquals(new int[]{ 20018, 20256, 20659, 20840, 21912, 23384, 23544, 24029, 25332, 25571, 26449, 26643, 27674, 27718, 27849, 28237, 30154, 31359, 31388, 31428, 33603, 36479, 36517, 37275, 37351, 37523, 38031, 38120, 38249 }, p2h("chuen"));
    assertArrayEquals(new int[]{ 21636, 21852, 22060, 25305, 25479, 25774, 32180, 32512, 33537 }, p2h("chuet"));
    assertArrayEquals(new int[]{ 20652, 21462, 21561, 21840, 23094, 23828, 24464, 25462, 25703, 28353, 28810, 32736, 33030, 36235, 36259, 36264, 37656, 38180, 38500, 38539, 38543, 38568 }, p2h("chui"));
    assertArrayEquals(new int[]{ 20109, 20419, 25616, 26463, 30044, 30679, 33988, 36895, 40810, 40842 }, p2h("chuk"));
    assertArrayEquals(new int[]{ 24033, 24490, 26092, 26149, 26943, 31206, 34850 }, p2h("chun"));
    assertArrayEquals(new int[]{ 19995, 20174, 20805, 20898, 20914, 21254, 21474, 22250, 22257, 22618, 23456, 23541, 24478, 26494, 27798, 31581, 31631, 32874, 32880, 33905, 34085, 34411, 34414, 34426, 34427, 34428, 34431, 34443, 34445, 34461, 34471, 34472, 34480, 34484, 34485, 34486, 34490, 34500, 34505, 34510, 34511, 34512, 34513, 34520, 34526, 34537, 34541, 34545, 34546, 34547, 34548, 34552, 34554, 34563, 34567, 34569, 34570, 34573, 34590, 34595, 34601, 34606, 34609, 34615, 34622, 34623, 34632, 34643, 34659, 34660, 34661, 34670, 34672, 34683, 34684, 34685, 34686, 34692, 34693, 34696, 34699, 34707, 34711, 34728, 34731, 34732, 34733, 34735, 34741, 34747, 34749, 34760, 34762, 34770, 34771, 34779, 34784, 34787, 34789, 34794, 34799, 34806, 34814, 34822, 34826, 34832, 34833, 34835, 34836, 34838, 34843, 34849, 34851, 34871, 34873, 34876, 34935, 37325, 37507, 38131, 39686 }, p2h("chung"));
    assertArrayEquals(new int[]{ 20986, 40668, 40674 }, p2h("chut"));
    assertArrayEquals(new int[]{ 25171 }, p2h("da"));
    assertArrayEquals(new int[]{ 21574, 22823, 24102, 24118, 25140, 27513 }, p2h("daai"));
    assertArrayEquals(new int[]{ 20747, 21846, 25285, 25812, 27694, 28129, 32829, 32835, 32966, 33213 }, p2h("daam"));
    assertArrayEquals(new int[]{ 20025, 20294, 21333, 21934, 24377, 24392, 24814, 24986, 25528, 25763, 26086, 34507, 35477, 35806, 37112, 37170, 37485, 38077, 38780 }, p2h("daan"));
    assertArrayEquals(new int[]{ 25645, 27795, 30249, 31572, 36367 }, p2h("daap"));
    assertArrayEquals(new int[]{ 21970, 25374, 25787, 31530, 36798, 36948, 38801, 38851 }, p2h("daat"));
    assertArrayEquals(new int[]{ 20302, 24093, 24213, 24351, 25269, 27664, 31532, 32669, 36882, 36910, 36958, 38582, 38584 }, p2h("dai"));
    assertArrayEquals(new int[]{ 24471, 24503, 29305, 38173 }, p2h("dak"));
    assertArrayEquals(new int[]{ 20979, 22100, 25125, 28783, 29128, 30331, 31561, 36460, 37011, 37159, 37913, 38251 }, p2h("dang"));
    assertArrayEquals(new int[]{ 20984, 31361 }, p2h("dat"));
    assertArrayEquals(new int[]{ 20828, 25238, 26007, 30168, 31398, 31431, 31998, 32416, 34474, 35910, 36887, 37380, 38061, 38497, 39717 }, p2h("dau"));
    assertArrayEquals(new int[]{ 22002, 29241 }, p2h("de"));
    assertArrayEquals(new int[]{ 22320 }, p2h("dei"));
    assertArrayEquals(new int[]{ 31515, 31860, 31988 }, p2h("dek"));
    assertArrayEquals(new int[]{ 30100, 30447, 37336, 38025 }, p2h("deng"));
    assertArrayEquals(new int[]{ 26421 }, p2h("deuh"));
    assertArrayEquals(new int[]{ 21828, 29730 }, p2h("deuk"));
    assertArrayEquals(new int[]{ 22016, 23265, 25932, 25973, 28068, 28364, 28404, 29380, 30340, 36842, 37841, 38237 }, p2h("dik"));
    assertArrayEquals(new int[]{ 24215, 25474, 28857, 40670 }, p2h("dim"));
    assertArrayEquals(new int[]{ 20856, 22443, 22666, 22880, 24005, 24020, 27583, 28096, 28593, 30005, 30008, 30315, 30322, 30872, 37439, 38079, 38651, 38747, 39003, 39072 }, p2h("din"));
    assertArrayEquals(new int[]{ 19969, 20163, 21486, 23450, 27964, 31402, 32821, 35330, 35746, 37194, 37664, 38189, 38914, 39030, 40718 }, p2h("ding"));
    assertArrayEquals(new int[]{ 21472, 21899, 29266, 30090, 30879, 34678, 35548, 35853 }, p2h("dip"));
    assertArrayEquals(new int[]{ 29918, 31209, 36300, 36604, 36726, 36845 }, p2h("dit"));
    assertArrayEquals(new int[]{ 19999, 20002, 20939, 20993, 21500, 21514, 25481, 30857, 35519, 35843, 35970, 37347, 37545, 38035, 38110, 38117, 38613 }, p2h("diu"));
    assertArrayEquals(new int[]{ 20498, 20992, 21040, 22047, 22581, 22930, 23548, 23566, 23707, 23798, 24230, 24764, 25443, 25623, 26460, 27672, 28193, 30423, 30428, 30585, 31291, 36077, 36172, 36947, 37117, 37709, 38208 }, p2h("do"));
    assertArrayEquals(new int[]{ 21057, 21722, 22427, 22549, 22702, 22810, 24816, 26421, 36346, 36530 }, p2h("doh"));
    assertArrayEquals(new int[]{ 20195, 23729, 24453, 34955, 40667 }, p2h("doi"));
    assertArrayEquals(new int[]{ 36401, 37944, 38094 }, p2h("dok"));
    assertArrayEquals(new int[]{ 20826, 24403, 25377, 25803, 26723, 27284, 30070, 30442, 33633, 37946, 38107, 40680 }, p2h("dong"));
    assertArrayEquals(new int[]{ 26029, 26039, 27573, 30701, 31471, 32222, 32526, 37723, 38203 }, p2h("duen"));
    assertArrayEquals(new int[]{ 22842, 22890 }, p2h("duet"));
    assertArrayEquals(new int[]{ 20812, 20817, 22534, 23545, 23565, 38431, 38538 }, p2h("dui"));
    assertArrayEquals(new int[]{ 27602, 29261, 29272, 29322, 29346, 29420, 29544, 30563, 31491, 31716, 35712, 35835, 40681, 40695 }, p2h("duk"));
    assertArrayEquals(new int[]{ 21544, 22136, 22697, 25958, 36929, 37389, 38045, 38931, 39039 }, p2h("dun"));
    assertArrayEquals(new int[]{ 19996, 20375, 20908, 20923, 20941, 21160, 21205, 21658, 24162, 24683, 25026, 26481, 26635, 26847, 27681, 27934, 33891 }, p2h("dung"));
    assertArrayEquals(new int[]{ 21270, 33457 }, p2h("fa"));
    assertArrayEquals(new int[]{ 20608, 21721, 22130, 22359, 22602, 24555, 31607 }, p2h("faai"));
    assertArrayEquals(new int[]{ 20961, 21453, 24070, 26805, 27146, 27867, 28902, 29033, 29359, 29923, 30024, 30058, 30718, 31020, 31684, 32321, 32763, 33539, 34115, 34281, 36009, 36137, 36820, 37353, 38034, 39151, 39277 }, p2h("faan"));
    assertArrayEquals(new int[]{ 21457, 27861, 29648, 29754, 30332, 39647, 39649, 39654, 39659, 39661, 39662, 39663, 39673, 39675, 39688, 39695, 39699, 39711, 39714 }, p2h("faat"));
    assertArrayEquals(new int[]{ 21536, 24223, 24290, 24509, 25381, 25582, 26198, 26249, 27832, 32954, 36027, 36153, 36637, 36745, 38212 }, p2h("fai"));
    assertArrayEquals(new int[]{ 20221, 20606, 20712, 20998, 21545, 22367, 22707, 22859, 22894, 23130, 24575, 24868, 24996, 26127, 27675, 27774, 28954, 29071, 31881, 31914, 31966, 32027, 32439, 33452, 33636, 33911, 34224, 35347, 35757, 37210, 40738 }, p2h("fan"));
    assertArrayEquals(new int[]{ 20047, 20240, 20315, 21823, 24343, 24573, 25282, 27679, 31059, 31567, 32602, 32624, 33396, 38309, 38400 }, p2h("fat"));
    assertArrayEquals(new int[]{ 21078, 21542, 22496, 28014, 28074, 32566, 32600, 38428 }, p2h("fau"));
    assertArrayEquals(new int[]{ 21857 }, p2h("fe"));
    assertArrayEquals(new int[]{ 21290, 22915, 25161, 26000, 28125, 32737, 32933, 33107, 33778, 34586, 35513, 35837, 38671, 38750, 39131, 39134 }, p2h("fei"));
    assertArrayEquals(new int[]{ 20249, 28779, 28800, 28822, 28828, 28829, 28843, 28849, 28855, 28859, 28864, 28874, 28904, 28944, 28947, 28950, 28975, 28977, 28997, 29002, 29010, 29020, 29032, 29036, 29043, 29048, 29050, 29080, 29088, 29107, 29121, 29129, 29140, 29148, 29152, 29159, 29177, 29213, 29224, 31185, 34636, 35506, 35838, 36008, 36135, 37413, 38060 }, p2h("foh"));
    assertArrayEquals(new int[]{ 25899, 38669 }, p2h("fok"));
    assertArrayEquals(new int[]{ 20223, 20917, 22346, 22952, 24140, 24439, 24653, 24908, 25151, 25918, 26041, 26051, 26052, 26054, 26060, 26066, 26179, 26507, 27841, 32033, 32442, 32915, 32938, 33323, 33459, 33618, 35370, 35594, 35775, 35854, 37377, 38059, 38450 }, p2h("fong"));
    assertArrayEquals(new int[]{ 20046, 20184, 20440, 20463, 20613, 21043, 21103, 21579, 21628, 21648, 21804, 22827, 22919, 23142, 23386, 23413, 23500, 24211, 24220, 24235, 25149, 25206, 25242, 25771, 25975, 26023, 26543, 29238, 29995, 31526, 32932, 33104, 33105, 33178, 33433, 33510, 33531, 34382, 35044, 35122, 35331, 35747, 36000, 36070, 36091, 36127, 36171, 36185, 36212, 36628, 36741, 37340, 38468, 39385, 39544, 39607 }, p2h("foo"));
    assertArrayEquals(new int[]{ 21913, 21945, 22862, 24674, 24724, 26214, 28784, 35452, 35496, 35801, 35826, 39745 }, p2h("fooi"));
    assertArrayEquals(new int[]{ 23485, 23532, 27426, 27454, 27489 }, p2h("foon"));
    assertArrayEquals(new int[]{ 38346, 38420 }, p2h("foot"));
    assertArrayEquals(new int[]{ 20239, 21264, 22797, 24133, 24489, 26381, 31119, 33145, 34656, 34993, 35079, 35206, 36667, 36752, 39333 }, p2h("fuk"));
    assertArrayEquals(new int[]{ 20016, 20472, 20911, 20964, 21802, 22857, 23553, 23792, 26539, 26963, 28925, 30127, 30219, 32299, 32541, 34562, 35575, 35773, 35920, 36898, 37586, 38155, 39080, 39086, 39100, 39110, 39118, 39121, 39125, 39129, 39130, 39342, 40179 }, p2h("fung"));
    assertArrayEquals(new int[]{ 20215, 20551, 20729, 21152, 22025, 22030, 22134, 23233, 23478, 26550, 26551, 31292, 34952, 36040, 36158, 37813, 38227, 39381, 39550 }, p2h("ga"));
    assertArrayEquals(new int[]{ 20171, 20339, 20565, 21896, 23596, 23622, 23626, 25106, 30028, 30117, 30342, 31224, 33445, 34903, 35299, 35489, 35819, 38454, 38542 }, p2h("gaai"));
    assertArrayEquals(new int[]{ 21981, 26684, 33011, 33160, 37784, 38217, 38548, 38761, 38802, 38804, 38819, 38827, 38831, 38834, 38836, 38857, 39612, 39730 }, p2h("gaak"));
    assertArrayEquals(new int[]{ 20943, 23604, 23607, 28187, 30417, 30435, 37492, 37970, 37995 }, p2h("gaam"));
    assertArrayEquals(new int[]{ 22904, 25315, 25441, 25536, 25791, 26604, 28071, 28567, 30839, 30897, 31616, 31777, 32365, 33392, 33393, 33575, 35563, 35855, 38159, 38291, 38388, 40572 }, p2h("gaan"));
    assertArrayEquals(new int[]{ 32789 }, p2h("gaang"));
    assertArrayEquals(new int[]{ 22841, 22846, 30002, 32987, 33626, 33698, 37440, 37583, 38078, 38103, 38960, 39050 }, p2h("gaap"));
    assertArrayEquals(new int[]{ 20132, 20348, 25605, 25630, 25898, 25945, 29409, 30350, 31382, 32094, 32478, 33014, 33184, 34527, 36324, 36611, 36739, 37066, 37496, 38128, 39171, 39290 }, p2h("gaau"));
    assertArrayEquals(new int[]{ 20552, 32380, 32487, 34015, 34186, 35336, 35745, 38622, 40481 }, p2h("gai"));
    assertArrayEquals(new int[]{ 20170, 21633, 22116, 24863, 25954, 26577, 29976, 31105, 32216, 32516, 37329, 37392, 37393, 37437, 37445, 37518, 37550, 37571, 37576, 37597, 37615, 37638, 37640, 37663, 37670, 37688, 37694, 37703, 37732, 37738, 37744, 37775, 37831, 37834, 37836, 37852, 37853, 37864, 37899, 37907, 37908, 37950, 38014, 38044, 38051, 38052, 38072, 38104, 38132, 38140, 38150, 38154, 38157, 38162, 38166, 38182, 38185, 38186, 38188, 38196, 38200, 38206, 38214, 38231, 38232, 38239, 38241, 38246 }, p2h("gam"));
    assertArrayEquals(new int[]{ 20165, 20677, 21711, 22535, 24062, 24079, 24081, 24084, 24089, 24113, 24123, 24124, 24131, 24148, 24151, 24152, 24155, 24158, 24161, 24172, 24439, 26020, 26681, 31563, 32039, 32202, 33390, 35641, 35880, 36319, 36817, 38771 }, p2h("gan"));
    assertArrayEquals(new int[]{ 21757, 24218, 26356, 26775, 31923, 32697, 32831, 39208, 39302 }, p2h("gang"));
    assertArrayEquals(new int[]{ 24613, 34532, 40255, 40509 }, p2h("gap"));
    assertArrayEquals(new int[]{ 20342, 21513, 26708, 30105 }, p2h("gat"));
    assertArrayEquals(new int[]{ 20037, 20061, 21417, 21646, 22434, 22815, 22816, 24260, 25248, 25715, 25937, 26087, 28792, 29360, 29364, 29367, 29368, 29377, 29379, 29389, 29390, 29394, 29399, 29416, 29423, 29426, 29427, 29428, 29431, 29434, 29435, 29441, 29443, 29450, 29459, 29461, 29463, 29469, 29470, 29473, 29477, 29484, 29489, 29496, 29497, 29499, 29517, 29520, 29527, 29536, 29546, 29547, 29548, 29551, 29559, 29564, 29566, 29568, 29590, 30106, 31350, 33290, 33503, 38893, 40765 }, p2h("gau"));
    assertArrayEquals(new int[]{ 20238, 20960, 21086, 21501, 22064, 22522, 22931, 23020, 23492, 24049, 24190, 24524, 25216, 26082, 26426, 26462, 27231, 30079, 31637, 32000, 32426, 32641, 32648, 32908, 35352, 35663, 35749, 35760, 39138, 39269, 40578 }, p2h("gei"));
    assertArrayEquals(new int[]{ 37857, 38236, 38968, 39048, 39514 }, p2h("geng"));
    assertArrayEquals(new int[]{ 33050, 33139 }, p2h("geuk"));
    assertArrayEquals(new int[]{ 20725, 23004, 30086, 31976, 32652 }, p2h("geung"));
    assertArrayEquals(new int[]{ 20127, 20987, 25119, 25802, 26497, 26840, 26997, 27547, 28608 }, p2h("gik"));
    assertArrayEquals(new int[]{ 20461, 20745, 20860, 21073, 21133, 26816, 27298 }, p2h("gim"));
    assertArrayEquals(new int[]{ 20214, 20581, 22362, 22533, 24314, 25463, 32937, 33137, 35211, 35224, 35233, 35238, 35244, 35247, 35250, 35255, 35263, 35265, 35271, 35274, 35275, 35276, 35278, 35279, 35280, 35281, 37749, 38190 }, p2h("gin"));
    assertArrayEquals(new int[]{ 20140, 20742, 20834, 21037, 21060, 21170, 21185, 22659, 24452, 24465, 24778, 25964, 26223, 30153, 30169, 30684, 31454, 31455, 31478, 32147, 32463, 33550, 33606, 33610, 33686, 35686, 39514 }, p2h("ging"));
    assertArrayEquals(new int[]{ 21163 }, p2h("gip"));
    assertArrayEquals(new int[]{ 20625, 26480, 26688, 27905, 28500, 32080, 32467 }, p2h("git"));
    assertArrayEquals(new int[]{ 21483, 23047, 23308, 25963, 30699, 30703, 32371, 32564, 39509, 39556 }, p2h("giu"));
    assertArrayEquals(new int[]{ 21578, 30347, 30570, 30590, 31295, 31377, 31407, 31705, 31957, 32660, 33167, 35493, 35824, 37804, 38224, 39640 }, p2h("go"));
    assertArrayEquals(new int[]{ 20010, 20491, 21733, 27468 }, p2h("goh"));
    assertArrayEquals(new int[]{ 25913, 35442, 35813 }, p2h("goi"));
    assertArrayEquals(new int[]{ 21508, 25601, 25841, 26011, 29608, 29647, 35258, 35273, 35282, 35286, 35290, 35292, 35294, 35301, 35307, 35311, 35316, 35318, 38307, 38401 }, p2h("gok"));
    assertArrayEquals(new int[]{ 20094, 24178, 24185, 26438, 26751, 31174, 31240, 31487, 32925, 36214, 36245 }, p2h("gon"));
    assertArrayEquals(new int[]{ 20872, 21018, 21083, 23703, 23713, 23831, 25179, 26464, 27091, 27743, 28207, 32177, 32434, 32568, 32609, 32809, 32923, 35611, 35762, 37628, 38050, 38477 }, p2h("gong"));
    assertArrayEquals(new int[]{ 20272, 21476, 21653, 22266, 22993, 23396, 25925, 27837, 32607, 32929, 33735, 34506, 34865, 36764, 37431, 37678, 38068, 38178, 38599, 39015, 39038, 40227, 40490, 40723 }, p2h("goo"));
    assertArrayEquals(new int[]{ 20492, 20896, 23448, 26017, 26874, 28748, 31649, 32592, 33694, 35264, 35266, 36011, 36143, 39208, 39302, 40475, 40563 }, p2h("goon"));
    assertArrayEquals(new int[]{ 21106, 33883, 35088 }, p2h("got"));
    assertArrayEquals(new int[]{ 20518, 21048, 21195, 21211, 21367, 23071, 25424, 28051, 30519, 32121, 32482, 40273, 40515 }, p2h("guen"));
    assertArrayEquals(new int[]{ 20030, 20520, 20855, 21477, 22954, 23255, 23621, 24040, 24807, 25084, 25454, 25818, 28844, 30697, 31405, 31414, 33289, 36382, 37624, 38191, 39094, 39123 }, p2h("gui"));
    assertArrayEquals(new int[]{ 21950, 22195, 23616, 28951, 33738, 35895, 37606, 38164, 38816 }, p2h("guk"));
    assertArrayEquals(new int[]{ 20379, 20844, 20849, 21151, 23467, 23470, 24037, 24041, 24339, 24685, 25329, 25915, 34467, 36002, 36123, 36129, 36195, 36524, 38799, 40852, 40858 }, p2h("gung"));
    assertArrayEquals(new int[]{ 21072, 21102, 21350, 21617, 23521, 25346, 25499, 29916 }, p2h("gwa"));
    assertArrayEquals(new int[]{ 20054, 24618, 25296 }, p2h("gwaai"));
    assertArrayEquals(new int[]{ 20851, 24815, 24931, 38364 }, p2h("gwaan"));
    assertArrayEquals(new int[]{ 36891 }, p2h("gwaang"));
    assertArrayEquals(new int[]{ 21038, 25324 }, p2h("gwaat"));
    assertArrayEquals(new int[]{ 21055, 21132, 21286, 21293, 21294, 21297, 22317, 23395, 23743, 24011, 24402, 24760, 26588, 26690, 27331, 27512, 29808, 30344, 30789, 35437, 35809, 36020, 36149, 36330, 36556, 36712, 38312, 38394, 39243, 39304, 39740, 39747, 39751, 39752, 39753, 39757, 39758, 39761, 39768, 40860, 40863 }, p2h("gwai"));
    assertArrayEquals(new int[]{ 20891, 21531, 22343, 26829, 28378, 28414, 31584, 34926, 34974, 36557, 37089, 37406, 38055 }, p2h("gwan"));
    assertArrayEquals(new int[]{ 36703, 36720 }, p2h("gwang"));
    assertArrayEquals(new int[]{ 25496, 31391, 39592, 39600 }, p2h("gwat"));
    assertArrayEquals(new int[]{ 25155, 28847 }, p2h("gwing"));
    assertArrayEquals(new int[]{ 25096, 25111, 25115, 25121, 25122, 25124, 25127, 25129, 25132, 26524, 26869, 35065, 36807, 36942, 37633, 38174, 38982, 39063 }, p2h("gwoh"));
    assertArrayEquals(new int[]{ 22269, 22283, 24275, 37101 }, p2h("gwok"));
    assertArrayEquals(new int[]{ 20809, 24191, 24291 }, p2h("gwong"));
    assertArrayEquals(new int[]{ 19979, 21414, 21704, 22799, 24264, 26247, 29781, 34430, 34662, 36944, 37503, 38122, 38686 }, p2h("ha"));
    assertArrayEquals(new int[]{ 23401, 25032, 25577, 26800, 34809, 35559, 35856, 36994, 38795, 39608 }, p2h("haai"));
    assertArrayEquals(new int[]{ 21523, 22151, 23458 }, p2h("haak"));
    assertArrayEquals(new int[]{ 20989, 21688, 21898, 28085, 34900, 37532, 39201, 39301 }, p2h("haam"));
    assertArrayEquals(new int[]{ 23092, 23291, 38289, 38290, 38386, 38480 }, p2h("haan"));
    assertArrayEquals(new int[]{ 22353, 22831, 34892 }, p2h("haang"));
    assertArrayEquals(new int[]{ 21623, 21969, 23777, 23805, 25488, 29421, 29433 }, p2h("haap"));
    assertArrayEquals(new int[]{ 21564, 21742, 23011, 23389, 24039, 25335, 25928, 25970, 26657, 28900, 32771, 37237 }, p2h("haau"));
    assertArrayEquals(new int[]{ 20418, 20846, 22874, 31114, 31995, 32363, 40759 }, p2h("hai"));
    assertArrayEquals(new int[]{ 20811, 21051, 21888, 27690, 36203, 40657 }, p2h("hak"));
    assertArrayEquals(new int[]{ 21208, 21547, 22350, 22570, 23884, 25000, 25022, 25788, 30733, 37219, 38519, 38967, 39060 }, p2h("ham"));
    assertArrayEquals(new int[]{ 22438, 22718, 24456, 24680, 24691, 25031, 29408, 30165 }, p2h("han"));
    assertArrayEquals(new int[]{ 20136, 21756, 21827, 24184, 24646, 24658, 26447, 32943, 34892, 34913, 37847, 38143 }, p2h("hang"));
    assertArrayEquals(new int[]{ 20384, 20448, 21283, 21512, 27965, 30418, 31165, 32800, 38940, 39052 }, p2h("hap"));
    assertArrayEquals(new int[]{ 20062, 21182, 26680, 30606, 36676, 36758 }, p2h("hat"));
    assertArrayEquals(new int[]{ 20399, 20505, 21402, 21475, 21518, 21593, 21667, 21684, 21708, 21714, 21820, 21878, 21897, 21994, 22055, 22112, 22140, 22191, 24460, 29492, 31943, 36869, 40031, 40078 }, p2h("hau"));
    assertArrayEquals(new int[]{ 20694, 21775, 21916, 22075, 22079, 22120, 23305, 23682, 24076, 24323, 25103, 25138, 26342, 26820, 27450, 27668, 27683, 27773, 28911, 29081, 29113, 29306, 29351, 31143, 32690, 35912, 36215, 38519 }, p2h("hei"));
    assertArrayEquals(new int[]{ 21507 }, p2h("hek"));
    assertArrayEquals(new int[]{ 38772 }, p2h("heuh"));
    assertArrayEquals(new int[]{ 20065, 20139, 21521, 21709, 26188, 37129, 38911, 39177, 39287, 39321 }, p2h("heung"));
    assertArrayEquals(new int[]{ 27424, 27428, 27447, 27449, 27459, 27481, 27487, 35609, 35878, 38505, 38570 }, p2h("him"));
    assertArrayEquals(new int[]{ 23466, 25010, 25472, 26174, 29301, 29309, 29486, 29563, 31046, 32406, 32420, 34476, 34566, 34893, 35700, 35892, 36562, 36713, 36963, 38184, 39023 }, p2h("hin"));
    assertArrayEquals(new int[]{ 20804, 20852, 21375, 24198, 24950, 27682, 27691, 32580, 33288, 36629, 36731, 39336 }, p2h("hing"));
    assertArrayEquals(new int[]{ 21327, 21332, 24623, 25375, 25406, 27465, 32961, 33029 }, p2h("hip"));
    assertArrayEquals(new int[]{ 27463 }, p2h("hit"));
    assertArrayEquals(new int[]{ 20389, 20709, 21715, 22069, 22179, 22210, 26195, 26313, 27207, 27975, 28550, 31373, 31429, 39501, 39553 }, p2h("hiu"));
    assertArrayEquals(new int[]{ 21495, 21989, 22150, 22158, 22741, 22909, 26122, 27627, 28009, 30355, 32791, 34399, 35946, 39013, 39074, 39253 }, p2h("ho"));
    assertArrayEquals(new int[]{ 20309, 21487, 21621, 21996, 22391, 27827, 33336, 33655, 33743, 36032, 36154 }, p2h("hoh"));
    assertArrayEquals(new int[]{ 20133, 20975, 20977, 21056, 21108, 21992, 23475, 24320, 27686, 28023, 37799, 38112, 38158, 38283, 38950, 39055, 39405, 39559 }, p2h("hoi"));
    assertArrayEquals(new int[]{ 22771, 23398, 23416, 27580, 40372, 40548 }, p2h("hok"));
    assertArrayEquals(new int[]{ 20355, 21002, 23506, 24717, 25421, 26097, 27721, 27735, 28450, 28698, 28938, 30475, 32597, 32752, 37039, 38867, 38889, 38919, 39032, 40766 }, p2h("hon"));
    assertArrayEquals(new int[]{ 21281, 21549, 21712, 24055, 24247, 24951, 26477, 30518, 31568, 31968, 33108, 33322, 34892, 38477, 38917, 38927, 39033, 39043 }, p2h("hong"));
    assertArrayEquals(new int[]{ 21917, 28212 }, p2h("hot"));
    assertArrayEquals(new int[]{ 21149, 21240, 21927, 22280, 29356, 30030, 32098, 32474, 33841 }, p2h("huen"));
    assertArrayEquals(new int[]{ 34880 }, p2h("huet"));
    assertArrayEquals(new int[]{ 21435, 22040, 22099, 22687, 26665, 29030, 32714, 34394, 34395, 35377, 35425, 35768, 35817 }, p2h("hui"));
    assertArrayEquals(new int[]{ 21741, 37239 }, p2h("huk"));
    assertArrayEquals(new int[]{ 20517, 20807, 20982, 21256, 21700, 23380, 24656, 25511, 27742, 27769, 27946, 27958, 28888, 29066, 31354, 32005, 32418, 33016, 34425, 37207, 38596, 40251, 40511 }, p2h("hung"));
    assertArrayEquals(new int[]{ 20045, 21522, 21643, 21668, 21681, 25592, 27048, 28195, 28856, 30900, 34481, 35408, 35784 }, p2h("ja"));
    assertArrayEquals(new int[]{ 20538, 20661, 23528, 25995, 40779 }, p2h("jaai"));
    assertArrayEquals(new int[]{ 21863, 22038, 23429, 25321, 25527, 25688, 25799, 25842, 27901, 28580, 31364, 32735, 33332, 35627, 35882, 36012, 36131 }, p2h("jaak"));
    assertArrayEquals(new int[]{ 23853, 23940, 26025, 26028, 26242, 26283, 28251, 31449, 31948, 34360 }, p2h("jaam"));
    assertArrayEquals(new int[]{ 25776, 26632, 26855, 30415, 30430, 32187, 32386, 32509, 35738, 36090, 36106, 36186, 36190 }, p2h("jaan"));
    assertArrayEquals(new int[]{ 20105, 25379, 25497, 29229, 29424, 29465, 30529, 30556 }, p2h("jaang"));
    assertArrayEquals(new int[]{ 20064, 21634, 26434, 30504, 32722, 34989, 35186, 38296, 38392, 38598, 38620, 39087, 39122 }, p2h("jaap"));
    assertArrayEquals(new int[]{ 21747, 25166, 26413, 32046, 36555, 36711 }, p2h("jaat"));
    assertArrayEquals(new int[]{ 22066, 25214, 25235, 29226, 32617, 32920, 39519, 39588 }, p2h("jaau"));
    assertArrayEquals(new int[]{ 20180, 21046, 21058, 21137, 25380, 25507, 25824, 27982, 28382, 28399, 28639, 31085, 35069, 38469, 38555, 38657, 38717 }, p2h("jai"));
    assertArrayEquals(new int[]{ 20164, 20391, 20596, 21017, 21063 }, p2h("jak"));
    assertArrayEquals(new int[]{ 24590, 26015, 26517, 28024, 35670, 35886, 37341, 38024, 40198, 40489 }, p2h("jam"));
    assertArrayEquals(new int[]{ 21972, 22323, 25391, 29645, 30495, 36049, 36168, 37806, 38215, 38453, 38499, 38663 }, p2h("jan"));
    assertArrayEquals(new int[]{ 20711, 22092, 22686, 23781, 23842, 24974, 26366, 31581, 31631, 32638, 36104, 36192, 36461, 37658, 38126, 38147 }, p2h("jang"));
    assertArrayEquals(new int[]{ 22519, 25191, 27713 }, p2h("jap"));
    assertArrayEquals(new int[]{ 20356, 23241, 30142, 31378, 36074, 36136 }, p2h("jat"));
    assertArrayEquals(new int[]{ 20710, 20881, 21608, 21650, 21825, 21886, 22863, 23449, 23601, 24030, 24090, 25549, 25578, 26172, 26205, 27954, 30385, 30394, 32002, 32419, 32964, 33311, 33313, 33325, 33342, 34966, 35589, 35788, 36208, 36211, 36228, 36241, 36244, 36273, 36274, 36410, 36913, 37049, 37138, 37198, 37199, 37200, 37202, 37217, 37220, 37231, 37232, 37234, 37236, 37241, 37245, 37246, 37253, 37260, 37261, 37264, 37265, 37282, 37290, 37293, 37294, 37295, 37300, 37301, 37306, 37315, 37317 }, p2h("jau"));
    assertArrayEquals(new int[]{ 20511, 21983, 22992, 27053, 32773, 34071, 35613, 35874, 36825, 36889, 36974, 37754, 38167, 40403, 40551 }, p2h("je"));
    assertArrayEquals(new int[]{ 21482, 21799, 28825, 33034, 38587 }, p2h("jek"));
    assertArrayEquals(new int[]{ 20117, 20928, 28136, 37073, 37165, 38449 }, p2h("jeng"));
    assertArrayEquals(new int[]{ 22204, 29237, 30528, 31130, 33879, 37196, 38592, 40306, 40522 }, p2h("jeuk"));
    assertArrayEquals(new int[]{ 19976, 20169, 20183, 20261, 20480, 20687, 21280, 22870, 23558, 23559, 24080, 24115, 24352, 24373, 24432, 24581, 24757, 25484, 26454, 26728, 27123, 27167, 27233, 27974, 28072, 28466, 28467, 28479, 29518, 30260, 31456, 32960, 33081, 33931, 34083, 34769, 35937, 36076, 36134, 37233, 37292, 37848, 38197, 38263, 38271, 38556 }, p2h("jeung"));
    assertArrayEquals(new int[]{ 20043, 20282, 20447, 20857, 21482, 21553, 21672, 21987, 22336, 22986, 23039, 23376, 23383, 23388, 23546, 24051, 24535, 25351, 25370, 25711, 25903, 26088, 26234, 26525, 27490, 27835, 28100, 28363, 30164, 30693, 31040, 31049, 31063, 31258, 31869, 31906, 32025, 32043, 32440, 32622, 32788, 32796, 32930, 33026, 33258, 33267, 33268, 33437, 33463, 33586, 34584, 35468, 35566, 35864, 36039, 36164, 36286, 37657, 38193, 39164, 39282, 40796, 40839 }, p2h("ji"));
    assertArrayEquals(new int[]{ 20540, 21363, 22805, 23490, 24109, 26893, 27542, 27728, 28173, 28460, 30452, 30717, 31215, 31309, 31352, 31821, 32318, 32340, 32455, 32489, 32844, 32887, 34249, 34544, 34756, 36321, 36857, 39933, 40107 }, p2h("jik"));
    assertArrayEquals(new int[]{ 20308, 21344, 23574, 27838, 28176, 28472, 30651, 30759, 31896, 35449, 35691, 35893, 36109, 36193 }, p2h("jim"));
    assertArrayEquals(new int[]{ 21098, 23637, 25099, 25108, 25112, 25136, 27617, 27631, 27656, 28293, 28666, 29006, 30910, 31546, 31627, 31661, 32742, 33616, 34091, 34214, 36068, 36145, 36341, 36368, 36670, 36759, 39198, 39279 }, p2h("jin"));
    assertArrayEquals(new int[]{ 20390, 20597, 24103, 24128, 24449, 24501, 24596, 25919, 25972, 26230, 27491, 30151, 30555, 31087, 31118, 31934, 33976, 35388, 35657, 35777, 35998, 36126, 37478, 38066, 38742, 38745, 38748 }, p2h("jing"));
    assertArrayEquals(new int[]{ 21691, 21995, 22209, 25509 }, p2h("jip"));
    assertArrayEquals(new int[]{ 21746, 25130, 25240, 25463, 27993, 30571, 31680, 33410, 34544, 34756 }, p2h("jit"));
    assertArrayEquals(new int[]{ 20716, 21119, 21121, 21484, 22093, 25307, 26397, 26898, 27836, 28966, 29031, 34121, 35412, 35791, 36213, 36249 }, p2h("jiu"));
    assertArrayEquals(new int[]{ 20570, 21795, 26089, 26531, 26839, 28790, 30338, 31062, 31066, 31199, 31967, 32068, 32452, 34299, 34468, 36896, 36973 }, p2h("jo"));
    assertArrayEquals(new int[]{ 20304, 20430, 21161, 21777, 22352, 24038, 24231, 38459 }, p2h("joh"));
    assertArrayEquals(new int[]{ 20877, 21705, 22312, 23472, 28371, 28797, 28798, 30014, 36617, 36733 }, p2h("joi"));
    assertArrayEquals(new int[]{ 20316, 20991, 26152, 26590, 38015 }, p2h("jok"));
    assertArrayEquals(new int[]{ 22766, 22767, 22918, 22941, 24196, 25758, 26729, 27137, 29366, 29376, 33039, 33247, 33255, 33674, 33900, 34255, 35013, 35037, 36115, 36163 }, p2h("jong"));
    assertArrayEquals(new int[]{ 20027, 20303, 20367, 23005, 25284, 26417, 26666, 27880, 29038, 29482, 29664, 32305, 32437, 33585, 33879, 34496, 34523, 35387, 35461, 35576, 35803, 35832, 35948, 37526, 37956, 38114, 38136, 39376, 39547, 40584 }, p2h("jue"));
    assertArrayEquals(new int[]{ 19987, 20256, 20659, 21869, 22208, 23560, 23562, 25874, 25890, 30742, 30938, 36466, 36681, 36716, 36981, 38013, 38075, 38995, 39067 }, p2h("juen"));
    assertArrayEquals(new int[]{ 21852, 22060, 25479, 32085, 32180, 32477, 32512 }, p2h("juet"));
    assertArrayEquals(new int[]{ 21465, 21632, 22068, 22368, 22684, 23679, 23996, 24207, 25944, 26368, 26894, 27822, 29401, 30141, 32618, 32858, 34502, 35419, 35781, 36101, 36184, 36861, 37257, 37648, 38181, 38606, 40799, 40835 }, p2h("jui"));
    assertArrayEquals(new int[]{ 20439, 22014, 22065, 22225, 22959, 25417, 26063, 27978, 28609, 28891, 29165, 30633, 30682, 31069, 31481, 31482, 31569, 31689, 31751, 31909, 32396, 32493, 33331, 35302, 35320, 36275, 36277, 36280, 36282, 36284, 36287, 36292, 36294, 36302, 36303, 36311, 36318, 36323, 36331, 36332, 36343, 36344, 36345, 36347, 36349, 36357, 36361, 36372, 36381, 36387, 36396, 36398, 36399, 36405, 36409, 36410, 36413, 36416, 36417, 36418, 36425, 36426, 36428, 36433, 36437, 36441, 36457, 36463, 36468, 36470, 36474, 36476, 36485, 36489, 36491, 36495, 36496, 36497, 36499, 36500, 36506, 36508, 36510, 36513, 36518, 36522, 36600, 36724, 36880, 37827, 37938, 38238, 38255 }, p2h("juk"));
    assertArrayEquals(new int[]{ 31492, 31498, 31503, 31509, 31513, 31518, 31524, 31525, 31531, 31534, 31537, 31539, 31544, 31550, 31557, 31559, 31564, 31576, 31578, 31586, 31591, 31598, 31601, 31602, 31611, 31621, 31632, 31644, 31645, 31650, 31654, 31655, 31656, 31658, 31660, 31668, 31672, 31681, 31691, 31692, 31697, 31706, 31709, 31717, 31718, 31722, 31731, 31740, 31744, 31755, 31756, 31759, 31766, 31774, 31775, 31779, 31782, 31786, 31800, 31808, 31809, 31836, 31839, 31849, 31850 }, p2h("jukfa"));
    assertArrayEquals(new int[]{ 20934, 23613, 23803, 26185, 26187, 26543, 27197, 27941, 27994, 28310, 28652, 28908, 29180, 30433, 31360, 31459, 33275, 36827, 36914, 37931, 38220, 39423, 39567 }, p2h("jun"));
    assertArrayEquals(new int[]{ 20013, 20210, 20247, 20588, 20655, 23447, 24544, 24635, 26837, 30405, 30526, 31181, 31278, 31933, 32066, 32156, 32305, 32317, 32437, 32456, 32508, 32959, 33131, 33282, 33327, 35359, 35494, 35772, 35829, 36394, 36452, 37325, 37758, 37912, 38047, 38202, 38924, 39042, 39683 }, p2h("jung"));
    assertArrayEquals(new int[]{ 21330 }, p2h("jut"));
    assertArrayEquals(new int[]{ 20327, 21345, 21652, 21654 }, p2h("ka"));
    assertArrayEquals(new int[]{ 26999 }, p2h("kaai"));
    assertArrayEquals(new int[]{ 21677 }, p2h("kaat"));
    assertArrayEquals(new int[]{ 37548, 38096, 38752 }, p2h("kaau"));
    assertArrayEquals(new int[]{ 21551, 21855, 22865, 28330, 31293, 35350, 35755 }, p2h("kai"));
    assertArrayEquals(new int[]{ 22105, 22935, 25810, 29748, 31165, 34942, 35167 }, p2h("kam"));
    assertArrayEquals(new int[]{ 21220, 33465 }, p2h("kan"));
    assertArrayEquals(new int[]{ 21450, 21560, 27762, 31496, 32026, 32102, 32423, 32473 }, p2h("kap"));
    assertArrayEquals(new int[]{ 21683 }, p2h("kat"));
    assertArrayEquals(new int[]{ 20421, 21481, 23230, 23495, 25187, 26500, 27083, 27714, 27807, 28317, 29699, 33276, 33285, 34412, 34415, 35032, 36092, 36141, 40169, 40480 }, p2h("kau"));
    assertArrayEquals(new int[]{ 20285, 30264, 33540, 39438, 39569 }, p2h("ke"));
    assertArrayEquals(new int[]{ 20225, 20854, 20864, 22855, 23696, 23822, 26071, 26399, 26827, 27495, 29738, 30072, 31041, 31048, 31098, 38926, 39040, 39981, 40141, 40594 }, p2h("kei"));
    assertArrayEquals(new int[]{ 21095, 21127 }, p2h("kek"));
    assertArrayEquals(new int[]{ 21364, 21371, 22129 }, p2h("keuk"));
    assertArrayEquals(new int[]{ 24375, 24378, 32671, 32677, 37881, 38250 }, p2h("keung"));
    assertArrayEquals(new int[]{ 37463, 38067, 40660 }, p2h("kim"));
    assertArrayEquals(new int[]{ 34388 }, p2h("kin"));
    assertArrayEquals(new int[]{ 20542, 20670, 25806, 29756, 29898, 38915, 39031, 39912, 40120, 40677 }, p2h("king"));
    assertArrayEquals(new int[]{ 23377, 25581, 25733, 31469, 32687, 34638, 34829, 38945, 39049, 40672 }, p2h("kit"));
    assertArrayEquals(new int[]{ 20052, 20392, 20689, 21932, 25772, 26725, 27211, 27268, 32728, 32761, 36686, 36735 }, p2h("kiu"));
    assertArrayEquals(new int[]{ 37427, 38070 }, p2h("koh"));
    assertArrayEquals(new int[]{ 19984, 24936, 27010, 28297, 30422, 30604, 30933, 33995, 37411, 38041 }, p2h("koi"));
    assertArrayEquals(new int[]{ 22737, 27063, 28088, 30830, 30906, 37085 }, p2h("kok"));
    assertArrayEquals(new int[]{ 20130, 20233, 25193, 25239, 25844, 26103, 26336, 28821, 29378, 30719, 31014, 37415, 38058 }, p2h("kong"));
    assertArrayEquals(new int[]{ 31629 }, p2h("koo"));
    assertArrayEquals(new int[]{ 20393, 20744, 21053, 21130, 28291, 28528, 28905, 29172, 32362, 32472, 32873, 32885, 33037, 33214, 36036, 36159 }, p2h("kooi"));
    assertArrayEquals(new int[]{ 25324, 32850, 35905 }, p2h("koot"));
    assertArrayEquals(new int[]{ 25331, 26435, 27402, 35938, 39028, 39079 }, p2h("kuen"));
    assertArrayEquals(new int[]{ 20915, 21122, 21413, 22104, 23379, 25225, 27770, 28820, 32570, 35363, 35662, 35776, 35890, 38242 }, p2h("kuet"));
    assertArrayEquals(new int[]{ 20317, 20322, 20465, 21306, 21312, 23702, 23943, 25298, 25304, 28192, 30655, 31067, 34914, 34986, 36317, 36527, 36544, 39378, 39493, 39537, 39545 }, p2h("kui"));
    System.out.println("300 Pinyin-to-Hanzi tests were passed.");
  }

}
